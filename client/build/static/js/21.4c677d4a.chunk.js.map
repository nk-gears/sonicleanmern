{"version":3,"sources":["components/common/LoadingIndicator/LoadingIndicator.js","components/common/LoadingIndicator/index.js","views/Orders/Orders.js","views/Orders/index.js"],"names":["LoadingIndicator","react_default","a","createElement","className","connect","_ref2","orderhistory","account","orderhistorylist","totalCount","state","currentPage","sizePerPage","accountData","dispatch","getOrderHistoryList","page","size","fetchOrderHistoryList","_ref","history","BootstrapTableRef","createRef","useEffect","Card","CardHeader","Button","to","onClick","orders","forEach","order","orderArray","cust_ref","created","ship_company","mohawkAccount","sub_total","ship_first_name","ship_last_name","ship_address_1","ship_address_2","ship_city","ship_state","ship_zip","ship_phone","ship_e_mail","order_status","push","wb","XLSX","utils","book_new","wsAll","aoa_to_sheet","newDate","Date","filename","parseInt","getMonth","getDate","getFullYear","getTime","book_append_sheet","writeFile","concat","CardBody","REQUEST_STATUS","INITIAL","PENDING","lib","ref","data","pagination","options","onPageChange","current","getSizePerPage","sizePerPageList","onSizePerPageList","remote","fetchInfo","dataTotalSize","isKey","dataField","dataSort","dataFormat","cell","row","moment","format","dataAlign","Badge","color","pill","Fragment","_id","Orders"],"mappings":"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","file":"static/js/21.4c677d4a.chunk.js","sourcesContent":["import React from 'react'\n\nconst LoadingIndicator = () => {\n    return (\n        <div className=\"sk-chasing-dots\">\n            <div className=\"sk-child sk-dot1\"></div>\n            <div className=\"sk-child sk-dot2\"></div>\n        </div>\n    )\n}\n\nexport default LoadingIndicator\n","import LoadingIndicator from './LoadingIndicator'\n\nexport default LoadingIndicator","import React, { useEffect, createRef } from 'react'\nimport { connect } from \"react-redux\";\nimport moment from 'moment'\nimport XLSX from 'xlsx'\nimport { Card, CardBody,CardHeader, Badge, Button } from 'reactstrap';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport 'react-bootstrap-table/dist//react-bootstrap-table-all.min.css';\nimport { fetchOrderHistoryList } from \"../../modules/OrderHistory\";\nimport { REQUEST_STATUS } from '_config/constants'\nimport LoadingIndicator from 'components/common/LoadingIndicator'\n\nimport './Orders.scss'\n\nconst Orders = ({ \n    history, \n    getOrderHistoryList, \n    orderhistorylist, \n    totalCount,\n    currentPage,\n    sizePerPage,\n    accountData,\n    state \n}) => {\n\n    const BootstrapTableRef = createRef()\n\n    useEffect(() => {\n        getOrderHistoryList(1, 5)\n    }, [])\n\n    const actionFormatter  = (cell, row) => {\n        return (\n            <>\n                <Button onClick={() => history.push(`/order/${row._id}`)} color=\"success\" size=\"sm\">view recepit</Button>\n            </>\n        )\n    }\n\n    const paymentFormatter = (cell, row) => {\n        if(cell) {\n            return  <h5><Badge color=\"primary\" pill>Paid</Badge></h5>\n        } else {\n            return <h5><Badge color=\"danger\" pill>UnPaid</Badge></h5>\n        }\n    }\n\n    const onPageChange = (page, sizePerPage) => {\n        let oldPageSize = BootstrapTableRef.current.getSizePerPage(),\n        isActualPageChange = oldPageSize === sizePerPage\n        if(isActualPageChange)\n            getOrderHistoryList(page, sizePerPage)\n    }\n\n    const onSizePerPageList = (sizePerPage) => {\n        getOrderHistoryList(1, sizePerPage)\n    }\n\n    const shippingFormatter = (cell, row) => {\n        if(cell==='new' || cell==='at_wms') {\n            return <h5><Badge color=\"info\" className=\"text-white\">In Process</Badge></h5>\n        } else if(cell==='shipped') {\n            return <h5><Badge color=\"success\" className=\"text-white\">Shipped</Badge></h5>\n        } else {\n            return <h5><Badge color=\"secondary\" className=\"text-white\">{cell}</Badge></h5>\n        }\n    }\n\n    const dateFormatter = (cell, row) => {\n        return moment(cell).format(\"MM/DD/YY HH:MM a\")\n    }\n\n    const onExportFile = () => {\n        let orders = [[\n            \"Order Number\", \n            \"Order Date\", \n            \"Company\", \n            \"Mohawk Account #\",\n            \"Promo Code\",\n            \"Promo Code Value\",\n            \"Total\",\n            \"First Name\",\n            \"Last Name\",\n            \"Shipping Add. 1\",\n            \"Shipping Add. 2\",\n            \"Shipping City\",\n            \"Shipping State\",\n            \"Shipping Zip Code\",\n            \"Phone Number\",\n            \"Email\",\n            \"Payment Status\",\n            \"Payment Type\",\n            \"Shipping Status\"\n        ]]\n        orderhistorylist.forEach((order) => {\n          let orderArray = [\n                order.cust_ref, \n                order.created, \n                order.ship_company,\n                accountData.mohawkAccount,\n                \"\",\n                \"\",\n                order.sub_total,\n                order.ship_first_name,\n                order.ship_last_name,\n                order.ship_address_1,\n                order.ship_address_2,\n                order.ship_city,\n                order.ship_state,\n                order.ship_zip,\n                order.ship_phone,\n                order.ship_e_mail,\n                \"Paid\",\n                \"Credit/Debit Card\",\n                order.order_status==='new' || order.order_status==='at_wms' ? 'In Process' : order.order_status==='shipped' ? 'Shipped' : order.order_status\n            ]\n          orders.push(orderArray)\n        })\n    \n        const wb = XLSX.utils.book_new()\n        const wsAll = XLSX.utils.aoa_to_sheet(orders)\n        \n        var newDate = new Date();\n        let filename=parseInt(newDate.getMonth()+1)+'-'+newDate.getDate()+'-'+newDate.getFullYear()+'-'+newDate.getTime()\n\n        XLSX.utils.book_append_sheet(wb, wsAll, \"All Users\")\n            XLSX.writeFile(wb, `${filename}.xlsx`)\n    }\n\n    return (\n        <div className=\"animated fadeIn Orders\">\n            <Card>\n                <CardHeader>\n                    <h5 className=\"font-weight-normal\">Orders</h5>\n                    <Button to=\"#\" className=\"btn btn-sm btn-secondary mr-1 float-right\">\n                        <i className=\"fa fa-print\"></i> Print\n                    </Button>\n                    <Button onClick={onExportFile} className=\"btn btn-sm btn-info mr-1 float-right\">\n                        <i className=\"fa fa-save\"></i> Save\n                    </Button>\n                </CardHeader>\n                <CardBody>\n                    {\n                        state===REQUEST_STATUS.INITIAL || state===REQUEST_STATUS.PENDING ? \n                        <LoadingIndicator /> :\n                        <BootstrapTable \n                        ref={BootstrapTableRef}\n                        data={orderhistorylist} \n                        pagination \n                        options={{ \n                            sizePerPage: sizePerPage,\n                            onPageChange: onPageChange,\n                            sizePerPageList: [1, 5, 10, 15, 20, 25 ],\n                            page: currentPage,\n                            onSizePerPageList: onSizePerPageList \n                        }} \n                        remote={true}\n                        fetchInfo={ { dataTotalSize: totalCount } }\n                        >\n                            <TableHeaderColumn isKey={true} dataField=\"cust_ref\" dataSort>Order Number#</TableHeaderColumn>\n                            <TableHeaderColumn dataField=\"created\" dataFormat={dateFormatter} dataSort>Order Date</TableHeaderColumn>\n                            <TableHeaderColumn dataField=\"ship_company\" dataAlign='right' dataSort>Dealer Company</TableHeaderColumn>\n                            <TableHeaderColumn dataField=\"success_code\" dataAlign='right' dataFormat={paymentFormatter} dataSort>Payment Status</TableHeaderColumn>\n                            <TableHeaderColumn dataField=\"order_status\" dataAlign='right' dataFormat={shippingFormatter} dataSort>Shipping Status</TableHeaderColumn>\n                            <TableHeaderColumn dataField=\"sub_total\" dataSort dataAlign='right'>Total</TableHeaderColumn>\n                            <TableHeaderColumn dataField=\"action\" dataFormat={actionFormatter} dataAlign='right' >Action</TableHeaderColumn>\n                        </BootstrapTable>\n                    }\n                </CardBody>\n            </Card>\n        </div>\n    )\n}\n\nconst mapStateToProps = ({ orderhistory, account }) => {\n    const { orderhistorylist, totalCount, state, currentPage, sizePerPage } = orderhistory;\n    const {accountData} = account\n    return { orderhistorylist, totalCount, state, currentPage, sizePerPage, accountData };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getOrderHistoryList: (page, size) => {\n            dispatch(fetchOrderHistoryList(page, size));\n        }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Orders);\n","import Orders from './Orders'\n\nexport default Orders"],"sourceRoot":""}