{"version":3,"sources":["views/Pages/Login/LoginForm.js","views/Pages/Login/Login.js","views/Pages/Login/index.js"],"names":["loginSchema","Yup","shape","email","required","password","LoginForm","_ref","submit","state","react_default","a","createElement","formik_esm","initialValues","validationSchema","onSubmit","values","_ref2","setSubmitting","setErrors","render","_ref3","handleSubmit","isValid","errors","touched","handleChange","handleBlur","Form","noValidate","name","className","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","type","placeholder","autoComplete","value","valid","invalid","onChange","onBlur","FormFeedback","Row","Col","xs","dist_default","loading","isPending","data-color","data-size","L","data-style","EXPAND_RIGHT","disabled","Button","color","withRouter","connect","auth","isLoggedIn","user","loginState","error","dispatch","userLogin","data","fetchLogin","resetState","registerResetState","useEffect","REQUEST_STATUS","FAIL","toast","message","lib","Container","md","CardGroup","Card","CardBody","Login_LoginForm","style","width","Link","to","active","tabIndex","Login"],"mappings":"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","file":"static/js/26.70a0aa39.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  Button,\n  Col,\n  Form,\n  Row,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  FormFeedback,\n  Input\n} from 'reactstrap';\nimport { Formik } from 'formik';\n\nimport LaddaButton, {\n    EXPAND_RIGHT,\n    L\n  } from 'react-ladda';\n\nimport * as Yup from 'yup'\n\nimport {isPending} from 'utils/state'\n\nimport \"ladda/dist/ladda-themeless.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst loginSchema = Yup.object().shape({\n    email: Yup.string()\n        .email('Invalid email address')\n        .required('Email is required!'),\n    password: Yup.string()\n        .required('Password is required'),\n});\n  \n\nconst LoginForm = ({submit, state}) => {\n\n    const onSubmit = (values, { setSubmitting, setErrors }) => {\n        submit(values)\n    }\n\n    return (\n            <Formik\n                initialValues={{\n                    email: '',\n                    password: '',\n                }}\n                validationSchema={loginSchema}\n                onSubmit={onSubmit}\n                render={\n                    ({\n                        handleSubmit,\n                        isValid,\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur\n                    }) => (\n                        <Form\n                            onSubmit={handleSubmit}\n                            noValidate\n                            name=\"LoginForm\"\n                          >\n                            <h1>Login</h1>\n                            <p className=\"text-muted\">\n                              Sign In to yourr account\n                          </p>\n                            <InputGroup className=\"mb-3\">\n                              <InputGroupAddon addonType=\"prepend\">\n                                <InputGroupText>\n                                  <i className=\"icon-user\" />\n                                </InputGroupText>\n                              </InputGroupAddon>\n                              <Input\n                                type=\"text\"\n                                placeholder=\"Email\"\n                                autoComplete=\"email\"\n                                name=\"email\"\n                                value={values.email}\n                                valid={!errors.email}\n                                invalid={touched.email && !!errors.email}\n                                required\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                              />\n                              <FormFeedback>{errors.email}</FormFeedback>\n                            </InputGroup>\n                            <InputGroup className=\"mb-4\">\n                              <InputGroupAddon addonType=\"prepend\">\n                                <InputGroupText>\n                                  <i className=\"icon-lock\" />\n                                </InputGroupText>\n                              </InputGroupAddon>\n                              <Input\n                                type=\"password\"\n                                placeholder=\"Password\"\n                                autoComplete=\"current-password\"\n                                value={values.password}\n                                name=\"password\"\n                                valid={!errors.password}\n                                invalid={\n                                  touched.password && !!errors.password\n                                }\n                                required\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                              />\n                              <FormFeedback>{errors.password}</FormFeedback>\n                            </InputGroup> \n                            <Row>\n                              <Col xs=\"6\">\n                                <LaddaButton\n                                  type=\"submit\"\n                                  className=\"btn btn-primary btn-ladda\"\n                                  loading={isPending(state)}\n                                  data-color=\"primary\"\n                                  data-size={L}\n                                  data-style={EXPAND_RIGHT}\n                                  disabled={!isValid}\n                                >\n                                  Login\n                              </LaddaButton>\n                              </Col>\n                              <Col xs=\"6\" className=\"text-right\">\n                                <Button\n                                  type=\"button\"\n                                  color=\"link\"\n                                  className=\"px-0\"\n                                  loading={isPending(state)}\n                                >\n                                  Forgot password?\n                              </Button>\n                              </Col>\n                            </Row>\n                          </Form>\n                    )} />\n    )\n}\n\nexport default LoginForm\n","import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { ToastContainer, toast } from 'react-toastify';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardGroup,\n  Col,\n  Container,\n  Row\n} from \"reactstrap\";\n\nimport { \n  fetchLogin, \n  registerResetState \n} from \"modules/auth\";\n\nimport LoginForm from './LoginForm'\n\nimport \"ladda/dist/ladda-themeless.min.css\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport { REQUEST_STATUS } from '_config/constants';\n\nconst Login = ({userLogin, loginState, error, resetState}) => {\n\n  useEffect(()=>{\n    if(loginState===REQUEST_STATUS.FAIL) {\n      toast.error(error.message);\n      // resetState()\n    }\n   }, [loginState])\n\n    const onSubmit = (values) => {\n      userLogin(values)\n    }\n    return (\n      <div className=\"app flex-row align-items-center\">\n        <ToastContainer />\n        <Container>\n          <Row className=\"justify-content-center\">\n            <Col md=\"8\">\n              <CardGroup>\n                <Card className=\"p-4\">\n                  <CardBody>\n                    <LoginForm submit={onSubmit} state={loginState} />\n                  </CardBody>\n                </Card>\n                <Card\n                  className=\"text-white bg-primary py-5 d-md-down-none\"\n                  style={{ width: \"44%\" }}\n                >\n                  <CardBody className=\"text-center\">\n                    <div>\n                      <h2>Sign up</h2>\n                      <p>\n                        Lorem ipsum dolor sit amet, consectetur adipisicing\n                        elit, sed do eiusmod tempor incididunt ut labore et\n                        dolore magna aliqua.\n                      </p>\n                      <Link to=\"/register\">\n                        <Button\n                          color=\"primary\"\n                          className=\"mt-3\"\n                          active\n                          tabIndex={-1}\n                        >\n                          Register Now!\n                        </Button>\n                      </Link>\n                    </div>\n                  </CardBody>\n                </Card>\n              </CardGroup>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n}\n\nconst mapStateToProps = ({ auth }) => {\n  const { isLoggedIn, user, loginState, error } = auth; \n  return { isLoggedIn, user, loginState, error};\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    userLogin: (data) => {\n      dispatch(fetchLogin(data));\n    },\n    resetState: () => {\n      dispatch(registerResetState())\n    }\n  }\n}\n\nexport default withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null\n)(Login));\n","import Login from './Login'\n\nexport default Login"],"sourceRoot":""}